
temp_fans_A1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e80  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800305c  0800305c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003064  08003064  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800306c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000080  080030ec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080030ec  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006657  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000125d  00000000  00000000  00026707  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000568  00000000  00000000  00027968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004c0  00000000  00000000  00027ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020c2e  00000000  00000000  00028390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005962  00000000  00000000  00048fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9294  00000000  00000000  0004e920  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117bb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000173c  00000000  00000000  00117c30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000080 	.word	0x20000080
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003030 	.word	0x08003030

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000084 	.word	0x20000084
 8000204:	08003030 	.word	0x08003030

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af4:	f000 b972 	b.w	8000ddc <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9e08      	ldr	r6, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	4688      	mov	r8, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d14b      	bne.n	8000bb6 <__udivmoddi4+0xa6>
 8000b1e:	428a      	cmp	r2, r1
 8000b20:	4615      	mov	r5, r2
 8000b22:	d967      	bls.n	8000bf4 <__udivmoddi4+0xe4>
 8000b24:	fab2 f282 	clz	r2, r2
 8000b28:	b14a      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2a:	f1c2 0720 	rsb	r7, r2, #32
 8000b2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b32:	fa20 f707 	lsr.w	r7, r0, r7
 8000b36:	4095      	lsls	r5, r2
 8000b38:	ea47 0803 	orr.w	r8, r7, r3
 8000b3c:	4094      	lsls	r4, r2
 8000b3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b42:	0c23      	lsrs	r3, r4, #16
 8000b44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b48:	fa1f fc85 	uxth.w	ip, r5
 8000b4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b54:	fb07 f10c 	mul.w	r1, r7, ip
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x60>
 8000b5c:	18eb      	adds	r3, r5, r3
 8000b5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b62:	f080 811b 	bcs.w	8000d9c <__udivmoddi4+0x28c>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 8118 	bls.w	8000d9c <__udivmoddi4+0x28c>
 8000b6c:	3f02      	subs	r7, #2
 8000b6e:	442b      	add	r3, r5
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b84:	45a4      	cmp	ip, r4
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x8c>
 8000b88:	192c      	adds	r4, r5, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	f080 8107 	bcs.w	8000da0 <__udivmoddi4+0x290>
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	f240 8104 	bls.w	8000da0 <__udivmoddi4+0x290>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	442c      	add	r4, r5
 8000b9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ba0:	eba4 040c 	sub.w	r4, r4, ip
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	b11e      	cbz	r6, 8000bb0 <__udivmoddi4+0xa0>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c6 4300 	strd	r4, r3, [r6]
 8000bb0:	4639      	mov	r1, r7
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xbe>
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	f000 80eb 	beq.w	8000d96 <__udivmoddi4+0x286>
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bc6:	4638      	mov	r0, r7
 8000bc8:	4639      	mov	r1, r7
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f783 	clz	r7, r3
 8000bd2:	2f00      	cmp	r7, #0
 8000bd4:	d147      	bne.n	8000c66 <__udivmoddi4+0x156>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd0>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80fa 	bhi.w	8000dd4 <__udivmoddi4+0x2c4>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	4698      	mov	r8, r3
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa0>
 8000bee:	e9c6 4800 	strd	r4, r8, [r6]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xe8>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 808f 	bne.w	8000d20 <__udivmoddi4+0x210>
 8000c02:	1b49      	subs	r1, r1, r5
 8000c04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c08:	fa1f f885 	uxth.w	r8, r5
 8000c0c:	2701      	movs	r7, #1
 8000c0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c12:	0c23      	lsrs	r3, r4, #16
 8000c14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d907      	bls.n	8000c34 <__udivmoddi4+0x124>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x122>
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	f200 80cd 	bhi.w	8000dcc <__udivmoddi4+0x2bc>
 8000c32:	4684      	mov	ip, r0
 8000c34:	1a59      	subs	r1, r3, r1
 8000c36:	b2a3      	uxth	r3, r4
 8000c38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c44:	fb08 f800 	mul.w	r8, r8, r0
 8000c48:	45a0      	cmp	r8, r4
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0x14c>
 8000c4c:	192c      	adds	r4, r5, r4
 8000c4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x14a>
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	f200 80b6 	bhi.w	8000dc6 <__udivmoddi4+0x2b6>
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	eba4 0408 	sub.w	r4, r4, r8
 8000c60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c64:	e79f      	b.n	8000ba6 <__udivmoddi4+0x96>
 8000c66:	f1c7 0c20 	rsb	ip, r7, #32
 8000c6a:	40bb      	lsls	r3, r7
 8000c6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c74:	fa01 f407 	lsl.w	r4, r1, r7
 8000c78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c84:	4325      	orrs	r5, r4
 8000c86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c8a:	0c2c      	lsrs	r4, r5, #16
 8000c8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000c90:	fa1f fa8e 	uxth.w	sl, lr
 8000c94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c98:	fb09 f40a 	mul.w	r4, r9, sl
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000ca2:	fa00 f107 	lsl.w	r1, r0, r7
 8000ca6:	d90b      	bls.n	8000cc0 <__udivmoddi4+0x1b0>
 8000ca8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cb0:	f080 8087 	bcs.w	8000dc2 <__udivmoddi4+0x2b2>
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	f240 8084 	bls.w	8000dc2 <__udivmoddi4+0x2b2>
 8000cba:	f1a9 0902 	sub.w	r9, r9, #2
 8000cbe:	4473      	add	r3, lr
 8000cc0:	1b1b      	subs	r3, r3, r4
 8000cc2:	b2ad      	uxth	r5, r5
 8000cc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000ccc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cd4:	45a2      	cmp	sl, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x1da>
 8000cd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ce0:	d26b      	bcs.n	8000dba <__udivmoddi4+0x2aa>
 8000ce2:	45a2      	cmp	sl, r4
 8000ce4:	d969      	bls.n	8000dba <__udivmoddi4+0x2aa>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	4474      	add	r4, lr
 8000cea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cee:	fba0 8902 	umull	r8, r9, r0, r2
 8000cf2:	eba4 040a 	sub.w	r4, r4, sl
 8000cf6:	454c      	cmp	r4, r9
 8000cf8:	46c2      	mov	sl, r8
 8000cfa:	464b      	mov	r3, r9
 8000cfc:	d354      	bcc.n	8000da8 <__udivmoddi4+0x298>
 8000cfe:	d051      	beq.n	8000da4 <__udivmoddi4+0x294>
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d069      	beq.n	8000dd8 <__udivmoddi4+0x2c8>
 8000d04:	ebb1 050a 	subs.w	r5, r1, sl
 8000d08:	eb64 0403 	sbc.w	r4, r4, r3
 8000d0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d10:	40fd      	lsrs	r5, r7
 8000d12:	40fc      	lsrs	r4, r7
 8000d14:	ea4c 0505 	orr.w	r5, ip, r5
 8000d18:	e9c6 5400 	strd	r5, r4, [r6]
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	e747      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f703 	lsr.w	r7, r0, r3
 8000d28:	4095      	lsls	r5, r2
 8000d2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d36:	4338      	orrs	r0, r7
 8000d38:	0c01      	lsrs	r1, r0, #16
 8000d3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d3e:	fa1f f885 	uxth.w	r8, r5
 8000d42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4a:	fb07 f308 	mul.w	r3, r7, r8
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	fa04 f402 	lsl.w	r4, r4, r2
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x256>
 8000d56:	1869      	adds	r1, r5, r1
 8000d58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d5c:	d22f      	bcs.n	8000dbe <__udivmoddi4+0x2ae>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d92d      	bls.n	8000dbe <__udivmoddi4+0x2ae>
 8000d62:	3f02      	subs	r7, #2
 8000d64:	4429      	add	r1, r5
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	b281      	uxth	r1, r0
 8000d6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb00 f308 	mul.w	r3, r0, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x27e>
 8000d7e:	1869      	adds	r1, r5, r1
 8000d80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d84:	d217      	bcs.n	8000db6 <__udivmoddi4+0x2a6>
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d915      	bls.n	8000db6 <__udivmoddi4+0x2a6>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4429      	add	r1, r5
 8000d8e:	1ac9      	subs	r1, r1, r3
 8000d90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d94:	e73b      	b.n	8000c0e <__udivmoddi4+0xfe>
 8000d96:	4637      	mov	r7, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e709      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d9c:	4607      	mov	r7, r0
 8000d9e:	e6e7      	b.n	8000b70 <__udivmoddi4+0x60>
 8000da0:	4618      	mov	r0, r3
 8000da2:	e6fb      	b.n	8000b9c <__udivmoddi4+0x8c>
 8000da4:	4541      	cmp	r1, r8
 8000da6:	d2ab      	bcs.n	8000d00 <__udivmoddi4+0x1f0>
 8000da8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dac:	eb69 020e 	sbc.w	r2, r9, lr
 8000db0:	3801      	subs	r0, #1
 8000db2:	4613      	mov	r3, r2
 8000db4:	e7a4      	b.n	8000d00 <__udivmoddi4+0x1f0>
 8000db6:	4660      	mov	r0, ip
 8000db8:	e7e9      	b.n	8000d8e <__udivmoddi4+0x27e>
 8000dba:	4618      	mov	r0, r3
 8000dbc:	e795      	b.n	8000cea <__udivmoddi4+0x1da>
 8000dbe:	4667      	mov	r7, ip
 8000dc0:	e7d1      	b.n	8000d66 <__udivmoddi4+0x256>
 8000dc2:	4681      	mov	r9, r0
 8000dc4:	e77c      	b.n	8000cc0 <__udivmoddi4+0x1b0>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	442c      	add	r4, r5
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0x14c>
 8000dcc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd0:	442b      	add	r3, r5
 8000dd2:	e72f      	b.n	8000c34 <__udivmoddi4+0x124>
 8000dd4:	4638      	mov	r0, r7
 8000dd6:	e708      	b.n	8000bea <__udivmoddi4+0xda>
 8000dd8:	4637      	mov	r7, r6
 8000dda:	e6e9      	b.n	8000bb0 <__udivmoddi4+0xa0>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000de4:	b08c      	sub	sp, #48	; 0x30
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f000 fad4 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 f8c0 	bl	8000f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f000 f97e 	bl	80010f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000df4:	f000 f92a 	bl	800104c <MX_ADC1_Init>
    /* USER CODE BEGIN 3 */

	  //turn on/off fans

	  //collect temperature
	  HAL_ADC_Start(&hadc1);
 8000df8:	4855      	ldr	r0, [pc, #340]	; (8000f50 <main+0x170>)
 8000dfa:	f000 fb81 	bl	8001500 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000dfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e02:	4853      	ldr	r0, [pc, #332]	; (8000f50 <main+0x170>)
 8000e04:	f000 fc75 	bl	80016f2 <HAL_ADC_PollForConversion>
	  double adc_value= HAL_ADC_GetValue(&hadc1);
 8000e08:	4851      	ldr	r0, [pc, #324]	; (8000f50 <main+0x170>)
 8000e0a:	f000 fcf6 	bl	80017fa <HAL_ADC_GetValue>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fb3b 	bl	800048c <__aeabi_ui2d>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  HAL_ADC_Stop(&hadc1);
 8000e1e:	484c      	ldr	r0, [pc, #304]	; (8000f50 <main+0x170>)
 8000e20:	f000 fc34 	bl	800168c <HAL_ADC_Stop>

	  double resistance= -adc_value/(adc_value-adc_max);
 8000e24:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e28:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000e2c:	4b49      	ldr	r3, [pc, #292]	; (8000f54 <main+0x174>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fb2b 	bl	800048c <__aeabi_ui2d>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e3e:	f7ff f9e7 	bl	8000210 <__aeabi_dsub>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4620      	mov	r0, r4
 8000e48:	4629      	mov	r1, r5
 8000e4a:	f7ff fcc3 	bl	80007d4 <__aeabi_ddiv>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  double denominator= beta + (temp_0*log(resistance));
 8000e56:	4b40      	ldr	r3, [pc, #256]	; (8000f58 <main+0x178>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fb38 	bl	80004d0 <__aeabi_f2d>
 8000e60:	4680      	mov	r8, r0
 8000e62:	4689      	mov	r9, r1
 8000e64:	4b3d      	ldr	r3, [pc, #244]	; (8000f5c <main+0x17c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb31 	bl	80004d0 <__aeabi_f2d>
 8000e6e:	4682      	mov	sl, r0
 8000e70:	468b      	mov	fp, r1
 8000e72:	ed97 0b08 	vldr	d0, [r7, #32]
 8000e76:	f001 fe9f 	bl	8002bb8 <log>
 8000e7a:	ec53 2b10 	vmov	r2, r3, d0
 8000e7e:	4650      	mov	r0, sl
 8000e80:	4659      	mov	r1, fp
 8000e82:	f7ff fb7d 	bl	8000580 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4640      	mov	r0, r8
 8000e8c:	4649      	mov	r1, r9
 8000e8e:	f7ff f9c1 	bl	8000214 <__adddf3>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  double numerator= beta * temp_0;
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <main+0x178>)
 8000e9c:	ed93 7a00 	vldr	s14, [r3]
 8000ea0:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <main+0x17c>)
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eaa:	ee17 0a90 	vmov	r0, s15
 8000eae:	f7ff fb0f 	bl	80004d0 <__aeabi_f2d>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  double result= numerator/denominator;
 8000eba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ebe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ec2:	f7ff fc87 	bl	80007d4 <__aeabi_ddiv>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	e9c7 2302 	strd	r2, r3, [r7, #8]

	  double temp= (result * 9.0/5.0) - 459.67;
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <main+0x180>)
 8000ed4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ed8:	f7ff fb52 	bl	8000580 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <main+0x184>)
 8000eea:	f7ff fc73 	bl	80007d4 <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	a314      	add	r3, pc, #80	; (adr r3, 8000f48 <main+0x168>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	f7ff f988 	bl	8000210 <__aeabi_dsub>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	e9c7 2300 	strd	r2, r3, [r7]

	  if(temp > 80){
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <main+0x188>)
 8000f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f12:	f7ff fdc5 	bl	8000aa0 <__aeabi_dcmpgt>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00a      	beq.n	8000f32 <main+0x152>
		  HAL_GPIO_WritePin(transistor_gate_GPIO_Port, transistor_gate_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4812      	ldr	r0, [pc, #72]	; (8000f6c <main+0x18c>)
 8000f22:	f001 f91d 	bl	8002160 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2120      	movs	r1, #32
 8000f2a:	4810      	ldr	r0, [pc, #64]	; (8000f6c <main+0x18c>)
 8000f2c:	f001 f918 	bl	8002160 <HAL_GPIO_WritePin>
 8000f30:	e762      	b.n	8000df8 <main+0x18>
	  }
	  else{
		  HAL_GPIO_WritePin(transistor_gate_GPIO_Port, transistor_gate_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2101      	movs	r1, #1
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <main+0x18c>)
 8000f38:	f001 f912 	bl	8002160 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2120      	movs	r1, #32
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <main+0x18c>)
 8000f42:	f001 f90d 	bl	8002160 <HAL_GPIO_WritePin>
  {
 8000f46:	e757      	b.n	8000df8 <main+0x18>
 8000f48:	51eb851f 	.word	0x51eb851f
 8000f4c:	407cbab8 	.word	0x407cbab8
 8000f50:	2000009c 	.word	0x2000009c
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000004 	.word	0x20000004
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	40220000 	.word	0x40220000
 8000f64:	40140000 	.word	0x40140000
 8000f68:	40540000 	.word	0x40540000
 8000f6c:	40020000 	.word	0x40020000

08000f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b094      	sub	sp, #80	; 0x50
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	2234      	movs	r2, #52	; 0x34
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fe12 	bl	8002ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <SystemClock_Config+0xd4>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	4a29      	ldr	r2, [pc, #164]	; (8001044 <SystemClock_Config+0xd4>)
 8000f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <SystemClock_Config+0xd4>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <SystemClock_Config+0xd8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fbc:	4a22      	ldr	r2, [pc, #136]	; (8001048 <SystemClock_Config+0xd8>)
 8000fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <SystemClock_Config+0xd8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd8:	2310      	movs	r3, #16
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fe8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fb4e 	bl	80026a0 <HAL_RCC_OscConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800100a:	f000 f8e1 	bl	80011d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2302      	movs	r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	2102      	movs	r1, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f001 f8b2 	bl	8002194 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001036:	f000 f8cb 	bl	80011d0 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	; 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001060:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <MX_ADC1_Init+0x9c>)
 8001062:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001066:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800106a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_ADC1_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_ADC1_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_ADC1_Init+0x98>)
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <MX_ADC1_Init+0xa0>)
 8001090:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_ADC1_Init+0x98>)
 800109a:	2201      	movs	r2, #1
 800109c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_ADC1_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_ADC1_Init+0x98>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <MX_ADC1_Init+0x98>)
 80010ae:	f000 f9e3 	bl	8001478 <HAL_ADC_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010b8:	f000 f88a 	bl	80011d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010bc:	2301      	movs	r3, #1
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_ADC1_Init+0x98>)
 80010ce:	f000 fba1 	bl	8001814 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010d8:	f000 f87a 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000009c 	.word	0x2000009c
 80010e8:	40012000 	.word	0x40012000
 80010ec:	0f000001 	.word	0x0f000001

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MX_GPIO_Init+0xd0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a2c      	ldr	r2, [pc, #176]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <MX_GPIO_Init+0xd0>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <MX_GPIO_Init+0xd0>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, transistor_gate_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2121      	movs	r1, #33	; 0x21
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <MX_GPIO_Init+0xd4>)
 800117c:	f000 fff0 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_GPIO_Init+0xd8>)
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001196:	f000 fe51 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : transistor_gate_Pin LD2_Pin */
  GPIO_InitStruct.Pin = transistor_gate_Pin|LD2_Pin;
 800119a:	2321      	movs	r3, #33	; 0x21
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_GPIO_Init+0xd4>)
 80011b2:	f000 fe43 	bl	8001e3c <HAL_GPIO_Init>

}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	10210000 	.word	0x10210000
 80011cc:	40020800 	.word	0x40020800

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_MspInit+0x4c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a0f      	ldr	r2, [pc, #60]	; (800122c <HAL_MspInit+0x4c>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_MspInit+0x4c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_MspInit+0x4c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_MspInit+0x4c>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_MspInit+0x4c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800121e:	2007      	movs	r0, #7
 8001220:	f000 fdd8 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800

08001230 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a17      	ldr	r2, [pc, #92]	; (80012ac <HAL_ADC_MspInit+0x7c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d127      	bne.n	80012a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <HAL_ADC_MspInit+0x80>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a15      	ldr	r2, [pc, #84]	; (80012b0 <HAL_ADC_MspInit+0x80>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <HAL_ADC_MspInit+0x80>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_ADC_MspInit+0x80>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_ADC_MspInit+0x80>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_ADC_MspInit+0x80>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = thermistor_Pin;
 800128a:	2302      	movs	r3, #2
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128e:	2303      	movs	r3, #3
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(thermistor_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_ADC_MspInit+0x84>)
 800129e:	f000 fdcd 	bl	8001e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40012000 	.word	0x40012000
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130c:	f000 f894 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <SystemInit+0x28>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <SystemInit+0x28>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <SystemInit+0x28>)
 800132a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800132e:	609a      	str	r2, [r3, #8]
#endif
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001346:	e003      	b.n	8001350 <LoopCopyDataInit>

08001348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800134a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800134c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800134e:	3104      	adds	r1, #4

08001350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001358:	d3f6      	bcc.n	8001348 <CopyDataInit>
  ldr  r2, =_sbss
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800135c:	e002      	b.n	8001364 <LoopFillZerobss>

0800135e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800135e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001360:	f842 3b04 	str.w	r3, [r2], #4

08001364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001368:	d3f9      	bcc.n	800135e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800136a:	f7ff ffd3 	bl	8001314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136e:	f001 fbf7 	bl	8002b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001372:	f7ff fd35 	bl	8000de0 <main>
  bx  lr    
 8001376:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800137c:	0800306c 	.word	0x0800306c
  ldr  r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001384:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001388:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800138c:	200000e8 	.word	0x200000e8

08001390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <HAL_Init+0x40>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_Init+0x40>)
 80013aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_Init+0x40>)
 80013b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 fd09 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f808 	bl	80013d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff ff0a 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023c00 	.word	0x40023c00

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x54>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x58>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fd13 	bl	8001e22 <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001414:	f000 fce9 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HAL_InitTick+0x5c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000000c 	.word	0x2000000c
 8001430:	20000014 	.word	0x20000014
 8001434:	20000010 	.word	0x20000010

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000014 	.word	0x20000014
 800145c:	200000e4 	.word	0x200000e4

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	200000e4 	.word	0x200000e4

08001478 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e033      	b.n	80014f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff feca 	bl	8001230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d118      	bne.n	80014e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014be:	f023 0302 	bic.w	r3, r3, #2
 80014c2:	f043 0202 	orr.w	r2, r3, #2
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 fad4 	bl	8001a78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
 80014e6:	e001      	b.n	80014ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_ADC_Start+0x1a>
 8001516:	2302      	movs	r3, #2
 8001518:	e0a5      	b.n	8001666 <HAL_ADC_Start+0x166>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b01      	cmp	r3, #1
 800152e:	d018      	beq.n	8001562 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0201 	orr.w	r2, r2, #1
 800153e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001540:	4b4c      	ldr	r3, [pc, #304]	; (8001674 <HAL_ADC_Start+0x174>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_ADC_Start+0x178>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0c9a      	lsrs	r2, r3, #18
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001554:	e002      	b.n	800155c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	3b01      	subs	r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f9      	bne.n	8001556 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b01      	cmp	r3, #1
 800156e:	d179      	bne.n	8001664 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800159a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ae:	d106      	bne.n	80015be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f023 0206 	bic.w	r2, r3, #6
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	645a      	str	r2, [r3, #68]	; 0x44
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <HAL_ADC_Start+0x17c>)
 80015ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d12a      	bne.n	800163c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a25      	ldr	r2, [pc, #148]	; (8001680 <HAL_ADC_Start+0x180>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d015      	beq.n	800161c <HAL_ADC_Start+0x11c>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a23      	ldr	r2, [pc, #140]	; (8001684 <HAL_ADC_Start+0x184>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d105      	bne.n	8001606 <HAL_ADC_Start+0x106>
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_ADC_Start+0x17c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00a      	beq.n	800161c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <HAL_ADC_Start+0x188>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d129      	bne.n	8001664 <HAL_ADC_Start+0x164>
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_ADC_Start+0x17c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 031f 	and.w	r3, r3, #31
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d823      	bhi.n	8001664 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d11c      	bne.n	8001664 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	e013      	b.n	8001664 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <HAL_ADC_Start+0x180>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10e      	bne.n	8001664 <HAL_ADC_Start+0x164>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001662:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	2000000c 	.word	0x2000000c
 8001678:	431bde83 	.word	0x431bde83
 800167c:	40012300 	.word	0x40012300
 8001680:	40012000 	.word	0x40012000
 8001684:	40012100 	.word	0x40012100
 8001688:	40012200 	.word	0x40012200

0800168c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_ADC_Stop+0x16>
 800169e:	2302      	movs	r3, #2
 80016a0:	e021      	b.n	80016e6 <HAL_ADC_Stop+0x5a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170e:	d113      	bne.n	8001738 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800171a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800171e:	d10b      	bne.n	8001738 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f043 0220 	orr.w	r2, r3, #32
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e05c      	b.n	80017f2 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001738:	f7ff fe92 	bl	8001460 <HAL_GetTick>
 800173c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800173e:	e01a      	b.n	8001776 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001746:	d016      	beq.n	8001776 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_ADC_PollForConversion+0x6c>
 800174e:	f7ff fe87 	bl	8001460 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d20b      	bcs.n	8001776 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f043 0204 	orr.w	r2, r3, #4
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e03d      	b.n	80017f2 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b02      	cmp	r3, #2
 8001782:	d1dd      	bne.n	8001740 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 0212 	mvn.w	r2, #18
 800178c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d123      	bne.n	80017f0 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d11f      	bne.n	80017f0 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d111      	bne.n	80017f0 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x1c>
 800182c:	2302      	movs	r3, #2
 800182e:	e113      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x244>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b09      	cmp	r3, #9
 800183e:	d925      	bls.n	800188c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68d9      	ldr	r1, [r3, #12]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	3b1e      	subs	r3, #30
 8001856:	2207      	movs	r2, #7
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43da      	mvns	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	400a      	ands	r2, r1
 8001864:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68d9      	ldr	r1, [r3, #12]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b29b      	uxth	r3, r3
 8001876:	4618      	mov	r0, r3
 8001878:	4603      	mov	r3, r0
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4403      	add	r3, r0
 800187e:	3b1e      	subs	r3, #30
 8001880:	409a      	lsls	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	e022      	b.n	80018d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6919      	ldr	r1, [r3, #16]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	2207      	movs	r2, #7
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	400a      	ands	r2, r1
 80018ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6919      	ldr	r1, [r3, #16]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4403      	add	r3, r0
 80018c8:	409a      	lsls	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d824      	bhi.n	8001924 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	3b05      	subs	r3, #5
 80018ec:	221f      	movs	r2, #31
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	400a      	ands	r2, r1
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	4618      	mov	r0, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	3b05      	subs	r3, #5
 8001916:	fa00 f203 	lsl.w	r2, r0, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
 8001922:	e04c      	b.n	80019be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b0c      	cmp	r3, #12
 800192a:	d824      	bhi.n	8001976 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	3b23      	subs	r3, #35	; 0x23
 800193e:	221f      	movs	r2, #31
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43da      	mvns	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	400a      	ands	r2, r1
 800194c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4618      	mov	r0, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	3b23      	subs	r3, #35	; 0x23
 8001968:	fa00 f203 	lsl.w	r2, r0, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
 8001974:	e023      	b.n	80019be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b41      	subs	r3, #65	; 0x41
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	400a      	ands	r2, r1
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b41      	subs	r3, #65	; 0x41
 80019b2:	fa00 f203 	lsl.w	r2, r0, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019be:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <HAL_ADC_ConfigChannel+0x250>)
 80019c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <HAL_ADC_ConfigChannel+0x254>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d10f      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x1d8>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b12      	cmp	r3, #18
 80019d2:	d10b      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <HAL_ADC_ConfigChannel+0x254>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d12b      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x23a>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <HAL_ADC_ConfigChannel+0x258>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d003      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0x1f4>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b11      	cmp	r3, #17
 8001a06:	d122      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a11      	ldr	r2, [pc, #68]	; (8001a6c <HAL_ADC_ConfigChannel+0x258>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d111      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_ADC_ConfigChannel+0x25c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <HAL_ADC_ConfigChannel+0x260>)
 8001a30:	fba2 2303 	umull	r2, r3, r2, r3
 8001a34:	0c9a      	lsrs	r2, r3, #18
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a40:	e002      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f9      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40012300 	.word	0x40012300
 8001a68:	40012000 	.word	0x40012000
 8001a6c:	10000012 	.word	0x10000012
 8001a70:	2000000c 	.word	0x2000000c
 8001a74:	431bde83 	.word	0x431bde83

08001a78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a80:	4b79      	ldr	r3, [pc, #484]	; (8001c68 <ADC_Init+0x1f0>)
 8001a82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	021a      	lsls	r2, r3, #8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6899      	ldr	r1, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	4a58      	ldr	r2, [pc, #352]	; (8001c6c <ADC_Init+0x1f4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d022      	beq.n	8001b56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6899      	ldr	r1, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6899      	ldr	r1, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	e00f      	b.n	8001b76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0202 	bic.w	r2, r2, #2
 8001b84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6899      	ldr	r1, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7e1b      	ldrb	r3, [r3, #24]
 8001b90:	005a      	lsls	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01b      	beq.n	8001bdc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6859      	ldr	r1, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	035a      	lsls	r2, r3, #13
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	e007      	b.n	8001bec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	051a      	lsls	r2, r3, #20
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6899      	ldr	r1, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c2e:	025a      	lsls	r2, r3, #9
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6899      	ldr	r1, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	029a      	lsls	r2, r3, #10
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	609a      	str	r2, [r3, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40012300 	.word	0x40012300
 8001c6c:	0f000001 	.word	0x0f000001

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff47 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff5c 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffb0 	bl	8001d90 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e165      	b.n	8002124 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 8154 	bne.w	800211e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d00b      	beq.n	8001e96 <HAL_GPIO_Init+0x5a>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e8a:	2b11      	cmp	r3, #17
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b12      	cmp	r3, #18
 8001e94:	d130      	bne.n	8001ef8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 0201 	and.w	r2, r3, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0xfc>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b12      	cmp	r3, #18
 8001f36:	d123      	bne.n	8001f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80ae 	beq.w	800211e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b5c      	ldr	r3, [pc, #368]	; (8002138 <HAL_GPIO_Init+0x2fc>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a5b      	ldr	r2, [pc, #364]	; (8002138 <HAL_GPIO_Init+0x2fc>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_GPIO_Init+0x2fc>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fde:	4a57      	ldr	r2, [pc, #348]	; (800213c <HAL_GPIO_Init+0x300>)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_GPIO_Init+0x304>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d025      	beq.n	8002056 <HAL_GPIO_Init+0x21a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4d      	ldr	r2, [pc, #308]	; (8002144 <HAL_GPIO_Init+0x308>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01f      	beq.n	8002052 <HAL_GPIO_Init+0x216>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4c      	ldr	r2, [pc, #304]	; (8002148 <HAL_GPIO_Init+0x30c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d019      	beq.n	800204e <HAL_GPIO_Init+0x212>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_GPIO_Init+0x310>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0x20e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4a      	ldr	r2, [pc, #296]	; (8002150 <HAL_GPIO_Init+0x314>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00d      	beq.n	8002046 <HAL_GPIO_Init+0x20a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a49      	ldr	r2, [pc, #292]	; (8002154 <HAL_GPIO_Init+0x318>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_Init+0x206>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a48      	ldr	r2, [pc, #288]	; (8002158 <HAL_GPIO_Init+0x31c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_GPIO_Init+0x202>
 800203a:	2306      	movs	r3, #6
 800203c:	e00c      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 800203e:	2307      	movs	r3, #7
 8002040:	e00a      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002042:	2305      	movs	r3, #5
 8002044:	e008      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002046:	2304      	movs	r3, #4
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 800204a:	2303      	movs	r3, #3
 800204c:	e004      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 800204e:	2302      	movs	r3, #2
 8002050:	e002      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002056:	2300      	movs	r3, #0
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	f002 0203 	and.w	r2, r2, #3
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	4093      	lsls	r3, r2
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002068:	4934      	ldr	r1, [pc, #208]	; (800213c <HAL_GPIO_Init+0x300>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002076:	4b39      	ldr	r3, [pc, #228]	; (800215c <HAL_GPIO_Init+0x320>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800209a:	4a30      	ldr	r2, [pc, #192]	; (800215c <HAL_GPIO_Init+0x320>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020a0:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_GPIO_Init+0x320>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c4:	4a25      	ldr	r2, [pc, #148]	; (800215c <HAL_GPIO_Init+0x320>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_GPIO_Init+0x320>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ee:	4a1b      	ldr	r2, [pc, #108]	; (800215c <HAL_GPIO_Init+0x320>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_GPIO_Init+0x320>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002118:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_GPIO_Init+0x320>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3301      	adds	r3, #1
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b0f      	cmp	r3, #15
 8002128:	f67f ae96 	bls.w	8001e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800212c:	bf00      	nop
 800212e:	3724      	adds	r7, #36	; 0x24
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40023800 	.word	0x40023800
 800213c:	40013800 	.word	0x40013800
 8002140:	40020000 	.word	0x40020000
 8002144:	40020400 	.word	0x40020400
 8002148:	40020800 	.word	0x40020800
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40021000 	.word	0x40021000
 8002154:	40021400 	.word	0x40021400
 8002158:	40021800 	.word	0x40021800
 800215c:	40013c00 	.word	0x40013c00

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800217c:	e003      	b.n	8002186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0cc      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a8:	4b68      	ldr	r3, [pc, #416]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d90c      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b65      	ldr	r3, [pc, #404]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b63      	ldr	r3, [pc, #396]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0b8      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e8:	4b59      	ldr	r3, [pc, #356]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4a58      	ldr	r2, [pc, #352]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002200:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a52      	ldr	r2, [pc, #328]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800220a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b50      	ldr	r3, [pc, #320]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	494d      	ldr	r1, [pc, #308]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d044      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d119      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e07f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d003      	beq.n	8002252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800224e:	2b03      	cmp	r3, #3
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e067      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4934      	ldr	r1, [pc, #208]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002284:	f7ff f8ec 	bl	8001460 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7ff f8e8 	bl	8001460 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e04f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 020c 	and.w	r2, r3, #12
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1eb      	bne.n	800228c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d20c      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e032      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4916      	ldr	r1, [pc, #88]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	490e      	ldr	r1, [pc, #56]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800231a:	f000 f821 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 800231e:	4601      	mov	r1, r0
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	5cd3      	ldrb	r3, [r2, r3]
 800232e:	fa21 f303 	lsr.w	r3, r1, r3
 8002332:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f84c 	bl	80013d8 <HAL_InitTick>

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00
 8002350:	40023800 	.word	0x40023800
 8002354:	08003048 	.word	0x08003048
 8002358:	2000000c 	.word	0x2000000c
 800235c:	20000010 	.word	0x20000010

08002360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800237a:	4bc6      	ldr	r3, [pc, #792]	; (8002694 <HAL_RCC_GetSysClockFreq+0x334>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b0c      	cmp	r3, #12
 8002384:	f200 817e 	bhi.w	8002684 <HAL_RCC_GetSysClockFreq+0x324>
 8002388:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <HAL_RCC_GetSysClockFreq+0x30>)
 800238a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238e:	bf00      	nop
 8002390:	080023c5 	.word	0x080023c5
 8002394:	08002685 	.word	0x08002685
 8002398:	08002685 	.word	0x08002685
 800239c:	08002685 	.word	0x08002685
 80023a0:	080023cb 	.word	0x080023cb
 80023a4:	08002685 	.word	0x08002685
 80023a8:	08002685 	.word	0x08002685
 80023ac:	08002685 	.word	0x08002685
 80023b0:	080023d1 	.word	0x080023d1
 80023b4:	08002685 	.word	0x08002685
 80023b8:	08002685 	.word	0x08002685
 80023bc:	08002685 	.word	0x08002685
 80023c0:	0800252d 	.word	0x0800252d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4bb4      	ldr	r3, [pc, #720]	; (8002698 <HAL_RCC_GetSysClockFreq+0x338>)
 80023c6:	613b      	str	r3, [r7, #16]
       break;
 80023c8:	e15f      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ca:	4bb4      	ldr	r3, [pc, #720]	; (800269c <HAL_RCC_GetSysClockFreq+0x33c>)
 80023cc:	613b      	str	r3, [r7, #16]
      break;
 80023ce:	e15c      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d0:	4bb0      	ldr	r3, [pc, #704]	; (8002694 <HAL_RCC_GetSysClockFreq+0x334>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023da:	4bae      	ldr	r3, [pc, #696]	; (8002694 <HAL_RCC_GetSysClockFreq+0x334>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d04a      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e6:	4bab      	ldr	r3, [pc, #684]	; (8002694 <HAL_RCC_GetSysClockFreq+0x334>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	099b      	lsrs	r3, r3, #6
 80023ec:	f04f 0400 	mov.w	r4, #0
 80023f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	ea03 0501 	and.w	r5, r3, r1
 80023fc:	ea04 0602 	and.w	r6, r4, r2
 8002400:	4629      	mov	r1, r5
 8002402:	4632      	mov	r2, r6
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	f04f 0400 	mov.w	r4, #0
 800240c:	0154      	lsls	r4, r2, #5
 800240e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002412:	014b      	lsls	r3, r1, #5
 8002414:	4619      	mov	r1, r3
 8002416:	4622      	mov	r2, r4
 8002418:	1b49      	subs	r1, r1, r5
 800241a:	eb62 0206 	sbc.w	r2, r2, r6
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	f04f 0400 	mov.w	r4, #0
 8002426:	0194      	lsls	r4, r2, #6
 8002428:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800242c:	018b      	lsls	r3, r1, #6
 800242e:	1a5b      	subs	r3, r3, r1
 8002430:	eb64 0402 	sbc.w	r4, r4, r2
 8002434:	f04f 0100 	mov.w	r1, #0
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	00e2      	lsls	r2, r4, #3
 800243e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002442:	00d9      	lsls	r1, r3, #3
 8002444:	460b      	mov	r3, r1
 8002446:	4614      	mov	r4, r2
 8002448:	195b      	adds	r3, r3, r5
 800244a:	eb44 0406 	adc.w	r4, r4, r6
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	0262      	lsls	r2, r4, #9
 8002458:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800245c:	0259      	lsls	r1, r3, #9
 800245e:	460b      	mov	r3, r1
 8002460:	4614      	mov	r4, r2
 8002462:	4618      	mov	r0, r3
 8002464:	4621      	mov	r1, r4
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f04f 0400 	mov.w	r4, #0
 800246c:	461a      	mov	r2, r3
 800246e:	4623      	mov	r3, r4
 8002470:	f7fe fb36 	bl	8000ae0 <__aeabi_uldivmod>
 8002474:	4603      	mov	r3, r0
 8002476:	460c      	mov	r4, r1
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e049      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247c:	4b85      	ldr	r3, [pc, #532]	; (8002694 <HAL_RCC_GetSysClockFreq+0x334>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	f04f 0400 	mov.w	r4, #0
 8002486:	f240 11ff 	movw	r1, #511	; 0x1ff
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	ea03 0501 	and.w	r5, r3, r1
 8002492:	ea04 0602 	and.w	r6, r4, r2
 8002496:	4629      	mov	r1, r5
 8002498:	4632      	mov	r2, r6
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	f04f 0400 	mov.w	r4, #0
 80024a2:	0154      	lsls	r4, r2, #5
 80024a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024a8:	014b      	lsls	r3, r1, #5
 80024aa:	4619      	mov	r1, r3
 80024ac:	4622      	mov	r2, r4
 80024ae:	1b49      	subs	r1, r1, r5
 80024b0:	eb62 0206 	sbc.w	r2, r2, r6
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	f04f 0400 	mov.w	r4, #0
 80024bc:	0194      	lsls	r4, r2, #6
 80024be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024c2:	018b      	lsls	r3, r1, #6
 80024c4:	1a5b      	subs	r3, r3, r1
 80024c6:	eb64 0402 	sbc.w	r4, r4, r2
 80024ca:	f04f 0100 	mov.w	r1, #0
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	00e2      	lsls	r2, r4, #3
 80024d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024d8:	00d9      	lsls	r1, r3, #3
 80024da:	460b      	mov	r3, r1
 80024dc:	4614      	mov	r4, r2
 80024de:	195b      	adds	r3, r3, r5
 80024e0:	eb44 0406 	adc.w	r4, r4, r6
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	02a2      	lsls	r2, r4, #10
 80024ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024f2:	0299      	lsls	r1, r3, #10
 80024f4:	460b      	mov	r3, r1
 80024f6:	4614      	mov	r4, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	4621      	mov	r1, r4
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f04f 0400 	mov.w	r4, #0
 8002502:	461a      	mov	r2, r3
 8002504:	4623      	mov	r3, r4
 8002506:	f7fe faeb 	bl	8000ae0 <__aeabi_uldivmod>
 800250a:	4603      	mov	r3, r0
 800250c:	460c      	mov	r4, r1
 800250e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002510:	4b60      	ldr	r3, [pc, #384]	; (8002694 <HAL_RCC_GetSysClockFreq+0x334>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	3301      	adds	r3, #1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	613b      	str	r3, [r7, #16]
      break;
 800252a:	e0ae      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCC_GetSysClockFreq+0x334>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002534:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002536:	4b57      	ldr	r3, [pc, #348]	; (8002694 <HAL_RCC_GetSysClockFreq+0x334>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d04a      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002542:	4b54      	ldr	r3, [pc, #336]	; (8002694 <HAL_RCC_GetSysClockFreq+0x334>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	f04f 0400 	mov.w	r4, #0
 800254c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	ea03 0501 	and.w	r5, r3, r1
 8002558:	ea04 0602 	and.w	r6, r4, r2
 800255c:	4629      	mov	r1, r5
 800255e:	4632      	mov	r2, r6
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	f04f 0400 	mov.w	r4, #0
 8002568:	0154      	lsls	r4, r2, #5
 800256a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800256e:	014b      	lsls	r3, r1, #5
 8002570:	4619      	mov	r1, r3
 8002572:	4622      	mov	r2, r4
 8002574:	1b49      	subs	r1, r1, r5
 8002576:	eb62 0206 	sbc.w	r2, r2, r6
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	f04f 0400 	mov.w	r4, #0
 8002582:	0194      	lsls	r4, r2, #6
 8002584:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002588:	018b      	lsls	r3, r1, #6
 800258a:	1a5b      	subs	r3, r3, r1
 800258c:	eb64 0402 	sbc.w	r4, r4, r2
 8002590:	f04f 0100 	mov.w	r1, #0
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	00e2      	lsls	r2, r4, #3
 800259a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800259e:	00d9      	lsls	r1, r3, #3
 80025a0:	460b      	mov	r3, r1
 80025a2:	4614      	mov	r4, r2
 80025a4:	195b      	adds	r3, r3, r5
 80025a6:	eb44 0406 	adc.w	r4, r4, r6
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	0262      	lsls	r2, r4, #9
 80025b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025b8:	0259      	lsls	r1, r3, #9
 80025ba:	460b      	mov	r3, r1
 80025bc:	4614      	mov	r4, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	4621      	mov	r1, r4
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f04f 0400 	mov.w	r4, #0
 80025c8:	461a      	mov	r2, r3
 80025ca:	4623      	mov	r3, r4
 80025cc:	f7fe fa88 	bl	8000ae0 <__aeabi_uldivmod>
 80025d0:	4603      	mov	r3, r0
 80025d2:	460c      	mov	r4, r1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e049      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d8:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <HAL_RCC_GetSysClockFreq+0x334>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	f04f 0400 	mov.w	r4, #0
 80025e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	ea03 0501 	and.w	r5, r3, r1
 80025ee:	ea04 0602 	and.w	r6, r4, r2
 80025f2:	4629      	mov	r1, r5
 80025f4:	4632      	mov	r2, r6
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	f04f 0400 	mov.w	r4, #0
 80025fe:	0154      	lsls	r4, r2, #5
 8002600:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002604:	014b      	lsls	r3, r1, #5
 8002606:	4619      	mov	r1, r3
 8002608:	4622      	mov	r2, r4
 800260a:	1b49      	subs	r1, r1, r5
 800260c:	eb62 0206 	sbc.w	r2, r2, r6
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	f04f 0400 	mov.w	r4, #0
 8002618:	0194      	lsls	r4, r2, #6
 800261a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800261e:	018b      	lsls	r3, r1, #6
 8002620:	1a5b      	subs	r3, r3, r1
 8002622:	eb64 0402 	sbc.w	r4, r4, r2
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	00e2      	lsls	r2, r4, #3
 8002630:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002634:	00d9      	lsls	r1, r3, #3
 8002636:	460b      	mov	r3, r1
 8002638:	4614      	mov	r4, r2
 800263a:	195b      	adds	r3, r3, r5
 800263c:	eb44 0406 	adc.w	r4, r4, r6
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	02a2      	lsls	r2, r4, #10
 800264a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800264e:	0299      	lsls	r1, r3, #10
 8002650:	460b      	mov	r3, r1
 8002652:	4614      	mov	r4, r2
 8002654:	4618      	mov	r0, r3
 8002656:	4621      	mov	r1, r4
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f04f 0400 	mov.w	r4, #0
 800265e:	461a      	mov	r2, r3
 8002660:	4623      	mov	r3, r4
 8002662:	f7fe fa3d 	bl	8000ae0 <__aeabi_uldivmod>
 8002666:	4603      	mov	r3, r0
 8002668:	460c      	mov	r4, r1
 800266a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_GetSysClockFreq+0x334>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	0f1b      	lsrs	r3, r3, #28
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	613b      	str	r3, [r7, #16]
      break;
 8002682:	e002      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_RCC_GetSysClockFreq+0x338>)
 8002686:	613b      	str	r3, [r7, #16]
      break;
 8002688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800268a:	693b      	ldr	r3, [r7, #16]
}
 800268c:	4618      	mov	r0, r3
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	00f42400 	.word	0x00f42400
 800269c:	007a1200 	.word	0x007a1200

080026a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8083 	beq.w	80027c0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026ba:	4b95      	ldr	r3, [pc, #596]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d019      	beq.n	80026fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026c6:	4b92      	ldr	r3, [pc, #584]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026d2:	4b8f      	ldr	r3, [pc, #572]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026de:	d00c      	beq.n	80026fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e0:	4b8b      	ldr	r3, [pc, #556]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d112      	bne.n	8002712 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ec:	4b88      	ldr	r3, [pc, #544]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f8:	d10b      	bne.n	8002712 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fa:	4b85      	ldr	r3, [pc, #532]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d05b      	beq.n	80027be <HAL_RCC_OscConfig+0x11e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d157      	bne.n	80027be <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e216      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x8a>
 800271c:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a7b      	ldr	r2, [pc, #492]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e01d      	b.n	8002766 <HAL_RCC_OscConfig+0xc6>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002732:	d10c      	bne.n	800274e <HAL_RCC_OscConfig+0xae>
 8002734:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a75      	ldr	r2, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 800273a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b73      	ldr	r3, [pc, #460]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a72      	ldr	r2, [pc, #456]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	e00b      	b.n	8002766 <HAL_RCC_OscConfig+0xc6>
 800274e:	4b70      	ldr	r3, [pc, #448]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6f      	ldr	r2, [pc, #444]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6c      	ldr	r2, [pc, #432]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002764:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d013      	beq.n	8002796 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe fe77 	bl	8001460 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002776:	f7fe fe73 	bl	8001460 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b64      	cmp	r3, #100	; 0x64
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1db      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002788:	4b61      	ldr	r3, [pc, #388]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0xd6>
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fe63 	bl	8001460 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279e:	f7fe fe5f 	bl	8001460 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b64      	cmp	r3, #100	; 0x64
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1c7      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b0:	4b57      	ldr	r3, [pc, #348]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0xfe>
 80027bc:	e000      	b.n	80027c0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d06f      	beq.n	80028ac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027cc:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d017      	beq.n	8002808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027d8:	4b4d      	ldr	r3, [pc, #308]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d105      	bne.n	80027f0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027e4:	4b4a      	ldr	r3, [pc, #296]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00b      	beq.n	8002808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f0:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	d11c      	bne.n	8002836 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fc:	4b44      	ldr	r3, [pc, #272]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d116      	bne.n	8002836 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002808:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_OscConfig+0x180>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e18f      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4938      	ldr	r1, [pc, #224]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002834:	e03a      	b.n	80028ac <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d020      	beq.n	8002880 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283e:	4b35      	ldr	r3, [pc, #212]	; (8002914 <HAL_RCC_OscConfig+0x274>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fe0c 	bl	8001460 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284c:	f7fe fe08 	bl	8001460 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e170      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286a:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4925      	ldr	r1, [pc, #148]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
 800287e:	e015      	b.n	80028ac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCC_OscConfig+0x274>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe fdeb 	bl	8001460 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288e:	f7fe fde7 	bl	8001460 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e14f      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d037      	beq.n	8002928 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d016      	beq.n	80028ee <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_RCC_OscConfig+0x278>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c6:	f7fe fdcb 	bl	8001460 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ce:	f7fe fdc7 	bl	8001460 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e12f      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 80028e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x22e>
 80028ec:	e01c      	b.n	8002928 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_RCC_OscConfig+0x278>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe fdb4 	bl	8001460 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fa:	e00f      	b.n	800291c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fc:	f7fe fdb0 	bl	8001460 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d908      	bls.n	800291c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e118      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	42470000 	.word	0x42470000
 8002918:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291c:	4b8a      	ldr	r3, [pc, #552]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 800291e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e9      	bne.n	80028fc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8097 	beq.w	8002a64 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293a:	4b83      	ldr	r3, [pc, #524]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10f      	bne.n	8002966 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b7f      	ldr	r3, [pc, #508]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a7e      	ldr	r2, [pc, #504]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 8002950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b7c      	ldr	r3, [pc, #496]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b79      	ldr	r3, [pc, #484]	; (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d118      	bne.n	80029a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002972:	4b76      	ldr	r3, [pc, #472]	; (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a75      	ldr	r2, [pc, #468]	; (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297e:	f7fe fd6f 	bl	8001460 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002986:	f7fe fd6b 	bl	8001460 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0d3      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	4b6c      	ldr	r3, [pc, #432]	; (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x31a>
 80029ac:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	4a65      	ldr	r2, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6713      	str	r3, [r2, #112]	; 0x70
 80029b8:	e01c      	b.n	80029f4 <HAL_RCC_OscConfig+0x354>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b05      	cmp	r3, #5
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x33c>
 80029c2:	4b61      	ldr	r3, [pc, #388]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	4a60      	ldr	r2, [pc, #384]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
 80029ce:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a5d      	ldr	r2, [pc, #372]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	e00b      	b.n	80029f4 <HAL_RCC_OscConfig+0x354>
 80029dc:	4b5a      	ldr	r3, [pc, #360]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a59      	ldr	r2, [pc, #356]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	4b57      	ldr	r3, [pc, #348]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a56      	ldr	r2, [pc, #344]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 80029ee:	f023 0304 	bic.w	r3, r3, #4
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d015      	beq.n	8002a28 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe fd30 	bl	8001460 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f7fe fd2c 	bl	8001460 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e092      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ee      	beq.n	8002a04 <HAL_RCC_OscConfig+0x364>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fd1a 	bl	8001460 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7fe fd16 	bl	8001460 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e07c      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a46:	4b40      	ldr	r3, [pc, #256]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1ee      	bne.n	8002a30 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a58:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	4a3a      	ldr	r2, [pc, #232]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 8002a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d068      	beq.n	8002b3e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a6c:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d060      	beq.n	8002b3a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d145      	bne.n	8002b0c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a80:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <HAL_RCC_OscConfig+0x4b0>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7fe fceb 	bl	8001460 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7fe fce7 	bl	8001460 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e04f      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f0      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	019b      	lsls	r3, r3, #6
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	061b      	lsls	r3, r3, #24
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	071b      	lsls	r3, r3, #28
 8002ad8:	491b      	ldr	r1, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ade:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <HAL_RCC_OscConfig+0x4b0>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fcbc 	bl	8001460 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fcb8 	bl	8001460 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e020      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x44c>
 8002b0a:	e018      	b.n	8002b3e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_RCC_OscConfig+0x4b0>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe fca5 	bl	8001460 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe fca1 	bl	8001460 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e009      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_OscConfig+0x4a8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x47a>
 8002b38:	e001      	b.n	8002b3e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40007000 	.word	0x40007000
 8002b50:	42470060 	.word	0x42470060

08002b54 <__errno>:
 8002b54:	4b01      	ldr	r3, [pc, #4]	; (8002b5c <__errno+0x8>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000018 	.word	0x20000018

08002b60 <__libc_init_array>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4e0d      	ldr	r6, [pc, #52]	; (8002b98 <__libc_init_array+0x38>)
 8002b64:	4c0d      	ldr	r4, [pc, #52]	; (8002b9c <__libc_init_array+0x3c>)
 8002b66:	1ba4      	subs	r4, r4, r6
 8002b68:	10a4      	asrs	r4, r4, #2
 8002b6a:	2500      	movs	r5, #0
 8002b6c:	42a5      	cmp	r5, r4
 8002b6e:	d109      	bne.n	8002b84 <__libc_init_array+0x24>
 8002b70:	4e0b      	ldr	r6, [pc, #44]	; (8002ba0 <__libc_init_array+0x40>)
 8002b72:	4c0c      	ldr	r4, [pc, #48]	; (8002ba4 <__libc_init_array+0x44>)
 8002b74:	f000 fa5c 	bl	8003030 <_init>
 8002b78:	1ba4      	subs	r4, r4, r6
 8002b7a:	10a4      	asrs	r4, r4, #2
 8002b7c:	2500      	movs	r5, #0
 8002b7e:	42a5      	cmp	r5, r4
 8002b80:	d105      	bne.n	8002b8e <__libc_init_array+0x2e>
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
 8002b84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b88:	4798      	blx	r3
 8002b8a:	3501      	adds	r5, #1
 8002b8c:	e7ee      	b.n	8002b6c <__libc_init_array+0xc>
 8002b8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b92:	4798      	blx	r3
 8002b94:	3501      	adds	r5, #1
 8002b96:	e7f2      	b.n	8002b7e <__libc_init_array+0x1e>
 8002b98:	08003064 	.word	0x08003064
 8002b9c:	08003064 	.word	0x08003064
 8002ba0:	08003064 	.word	0x08003064
 8002ba4:	08003068 	.word	0x08003068

08002ba8 <memset>:
 8002ba8:	4402      	add	r2, r0
 8002baa:	4603      	mov	r3, r0
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d100      	bne.n	8002bb2 <memset+0xa>
 8002bb0:	4770      	bx	lr
 8002bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb6:	e7f9      	b.n	8002bac <memset+0x4>

08002bb8 <log>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	ed2d 8b02 	vpush	{d8}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	ec55 4b10 	vmov	r4, r5, d0
 8002bc4:	f000 f878 	bl	8002cb8 <__ieee754_log>
 8002bc8:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <log+0xec>)
 8002bca:	eeb0 8a40 	vmov.f32	s16, s0
 8002bce:	eef0 8a60 	vmov.f32	s17, s1
 8002bd2:	f993 6000 	ldrsb.w	r6, [r3]
 8002bd6:	1c73      	adds	r3, r6, #1
 8002bd8:	d05b      	beq.n	8002c92 <log+0xda>
 8002bda:	4622      	mov	r2, r4
 8002bdc:	462b      	mov	r3, r5
 8002bde:	4620      	mov	r0, r4
 8002be0:	4629      	mov	r1, r5
 8002be2:	f7fd ff67 	bl	8000ab4 <__aeabi_dcmpun>
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d153      	bne.n	8002c92 <log+0xda>
 8002bea:	2200      	movs	r2, #0
 8002bec:	2300      	movs	r3, #0
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	f7fd ff55 	bl	8000aa0 <__aeabi_dcmpgt>
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	d14b      	bne.n	8002c92 <log+0xda>
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <log+0xf0>)
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	9008      	str	r0, [sp, #32]
 8002c00:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002c04:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002c08:	b9a6      	cbnz	r6, 8002c34 <log+0x7c>
 8002c0a:	4b28      	ldr	r3, [pc, #160]	; (8002cac <log+0xf4>)
 8002c0c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002c10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c14:	4620      	mov	r0, r4
 8002c16:	2200      	movs	r2, #0
 8002c18:	2300      	movs	r3, #0
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	f7fd ff18 	bl	8000a50 <__aeabi_dcmpeq>
 8002c20:	bb40      	cbnz	r0, 8002c74 <log+0xbc>
 8002c22:	2301      	movs	r3, #1
 8002c24:	2e02      	cmp	r6, #2
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	d119      	bne.n	8002c5e <log+0xa6>
 8002c2a:	f7ff ff93 	bl	8002b54 <__errno>
 8002c2e:	2321      	movs	r3, #33	; 0x21
 8002c30:	6003      	str	r3, [r0, #0]
 8002c32:	e019      	b.n	8002c68 <log+0xb0>
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <log+0xf8>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2300      	movs	r3, #0
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd ff04 	bl	8000a50 <__aeabi_dcmpeq>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d0ea      	beq.n	8002c22 <log+0x6a>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	429e      	cmp	r6, r3
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	d111      	bne.n	8002c78 <log+0xc0>
 8002c54:	f7ff ff7e 	bl	8002b54 <__errno>
 8002c58:	2322      	movs	r3, #34	; 0x22
 8002c5a:	6003      	str	r3, [r0, #0]
 8002c5c:	e011      	b.n	8002c82 <log+0xca>
 8002c5e:	4668      	mov	r0, sp
 8002c60:	f000 f9dc 	bl	800301c <matherr>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d0e0      	beq.n	8002c2a <log+0x72>
 8002c68:	4812      	ldr	r0, [pc, #72]	; (8002cb4 <log+0xfc>)
 8002c6a:	f000 f9d9 	bl	8003020 <nan>
 8002c6e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8002c72:	e006      	b.n	8002c82 <log+0xca>
 8002c74:	2302      	movs	r3, #2
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	4668      	mov	r0, sp
 8002c7a:	f000 f9cf 	bl	800301c <matherr>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d0e8      	beq.n	8002c54 <log+0x9c>
 8002c82:	9b08      	ldr	r3, [sp, #32]
 8002c84:	b11b      	cbz	r3, 8002c8e <log+0xd6>
 8002c86:	f7ff ff65 	bl	8002b54 <__errno>
 8002c8a:	9b08      	ldr	r3, [sp, #32]
 8002c8c:	6003      	str	r3, [r0, #0]
 8002c8e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8002c92:	eeb0 0a48 	vmov.f32	s0, s16
 8002c96:	eef0 0a68 	vmov.f32	s1, s17
 8002c9a:	b00a      	add	sp, #40	; 0x28
 8002c9c:	ecbd 8b02 	vpop	{d8}
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000007c 	.word	0x2000007c
 8002ca8:	08003058 	.word	0x08003058
 8002cac:	c7efffff 	.word	0xc7efffff
 8002cb0:	fff00000 	.word	0xfff00000
 8002cb4:	0800305b 	.word	0x0800305b

08002cb8 <__ieee754_log>:
 8002cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cbc:	ec51 0b10 	vmov	r0, r1, d0
 8002cc0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002cc4:	b087      	sub	sp, #28
 8002cc6:	460d      	mov	r5, r1
 8002cc8:	da27      	bge.n	8002d1a <__ieee754_log+0x62>
 8002cca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002cce:	4303      	orrs	r3, r0
 8002cd0:	ee10 2a10 	vmov	r2, s0
 8002cd4:	d10a      	bne.n	8002cec <__ieee754_log+0x34>
 8002cd6:	49cc      	ldr	r1, [pc, #816]	; (8003008 <__ieee754_log+0x350>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7fd fd79 	bl	80007d4 <__aeabi_ddiv>
 8002ce2:	ec41 0b10 	vmov	d0, r0, r1
 8002ce6:	b007      	add	sp, #28
 8002ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cec:	2900      	cmp	r1, #0
 8002cee:	da05      	bge.n	8002cfc <__ieee754_log+0x44>
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	f7fd fa8d 	bl	8000210 <__aeabi_dsub>
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e7f0      	b.n	8002cde <__ieee754_log+0x26>
 8002cfc:	4bc3      	ldr	r3, [pc, #780]	; (800300c <__ieee754_log+0x354>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f7fd fc3e 	bl	8000580 <__aeabi_dmul>
 8002d04:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8002d08:	460d      	mov	r5, r1
 8002d0a:	4ac1      	ldr	r2, [pc, #772]	; (8003010 <__ieee754_log+0x358>)
 8002d0c:	4295      	cmp	r5, r2
 8002d0e:	dd06      	ble.n	8002d1e <__ieee754_log+0x66>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	f7fd fa7e 	bl	8000214 <__adddf3>
 8002d18:	e7e3      	b.n	8002ce2 <__ieee754_log+0x2a>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e7f5      	b.n	8002d0a <__ieee754_log+0x52>
 8002d1e:	152c      	asrs	r4, r5, #20
 8002d20:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002d24:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8002d28:	441c      	add	r4, r3
 8002d2a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8002d2e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8002d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d36:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8002d3a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8002d3e:	ea42 0105 	orr.w	r1, r2, r5
 8002d42:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8002d46:	2200      	movs	r2, #0
 8002d48:	4bb2      	ldr	r3, [pc, #712]	; (8003014 <__ieee754_log+0x35c>)
 8002d4a:	f7fd fa61 	bl	8000210 <__aeabi_dsub>
 8002d4e:	1cab      	adds	r3, r5, #2
 8002d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	4682      	mov	sl, r0
 8002d58:	468b      	mov	fp, r1
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	dc53      	bgt.n	8002e08 <__ieee754_log+0x150>
 8002d60:	2300      	movs	r3, #0
 8002d62:	f7fd fe75 	bl	8000a50 <__aeabi_dcmpeq>
 8002d66:	b1d0      	cbz	r0, 8002d9e <__ieee754_log+0xe6>
 8002d68:	2c00      	cmp	r4, #0
 8002d6a:	f000 8120 	beq.w	8002fae <__ieee754_log+0x2f6>
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f7fd fb9c 	bl	80004ac <__aeabi_i2d>
 8002d74:	a390      	add	r3, pc, #576	; (adr r3, 8002fb8 <__ieee754_log+0x300>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	4606      	mov	r6, r0
 8002d7c:	460f      	mov	r7, r1
 8002d7e:	f7fd fbff 	bl	8000580 <__aeabi_dmul>
 8002d82:	a38f      	add	r3, pc, #572	; (adr r3, 8002fc0 <__ieee754_log+0x308>)
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	4604      	mov	r4, r0
 8002d8a:	460d      	mov	r5, r1
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	4639      	mov	r1, r7
 8002d90:	f7fd fbf6 	bl	8000580 <__aeabi_dmul>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4620      	mov	r0, r4
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	e7ba      	b.n	8002d14 <__ieee754_log+0x5c>
 8002d9e:	a38a      	add	r3, pc, #552	; (adr r3, 8002fc8 <__ieee754_log+0x310>)
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	4650      	mov	r0, sl
 8002da6:	4659      	mov	r1, fp
 8002da8:	f7fd fbea 	bl	8000580 <__aeabi_dmul>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	2000      	movs	r0, #0
 8002db2:	4999      	ldr	r1, [pc, #612]	; (8003018 <__ieee754_log+0x360>)
 8002db4:	f7fd fa2c 	bl	8000210 <__aeabi_dsub>
 8002db8:	4652      	mov	r2, sl
 8002dba:	4606      	mov	r6, r0
 8002dbc:	460f      	mov	r7, r1
 8002dbe:	465b      	mov	r3, fp
 8002dc0:	4650      	mov	r0, sl
 8002dc2:	4659      	mov	r1, fp
 8002dc4:	f7fd fbdc 	bl	8000580 <__aeabi_dmul>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4630      	mov	r0, r6
 8002dce:	4639      	mov	r1, r7
 8002dd0:	f7fd fbd6 	bl	8000580 <__aeabi_dmul>
 8002dd4:	4606      	mov	r6, r0
 8002dd6:	460f      	mov	r7, r1
 8002dd8:	b914      	cbnz	r4, 8002de0 <__ieee754_log+0x128>
 8002dda:	4632      	mov	r2, r6
 8002ddc:	463b      	mov	r3, r7
 8002dde:	e0a0      	b.n	8002f22 <__ieee754_log+0x26a>
 8002de0:	4620      	mov	r0, r4
 8002de2:	f7fd fb63 	bl	80004ac <__aeabi_i2d>
 8002de6:	a374      	add	r3, pc, #464	; (adr r3, 8002fb8 <__ieee754_log+0x300>)
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	4680      	mov	r8, r0
 8002dee:	4689      	mov	r9, r1
 8002df0:	f7fd fbc6 	bl	8000580 <__aeabi_dmul>
 8002df4:	a372      	add	r3, pc, #456	; (adr r3, 8002fc0 <__ieee754_log+0x308>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	460d      	mov	r5, r1
 8002dfe:	4640      	mov	r0, r8
 8002e00:	4649      	mov	r1, r9
 8002e02:	f7fd fbbd 	bl	8000580 <__aeabi_dmul>
 8002e06:	e0a5      	b.n	8002f54 <__ieee754_log+0x29c>
 8002e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e0c:	f7fd fa02 	bl	8000214 <__adddf3>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4650      	mov	r0, sl
 8002e16:	4659      	mov	r1, fp
 8002e18:	f7fd fcdc 	bl	80007d4 <__aeabi_ddiv>
 8002e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8002e20:	4620      	mov	r0, r4
 8002e22:	f7fd fb43 	bl	80004ac <__aeabi_i2d>
 8002e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	f7fd fba5 	bl	8000580 <__aeabi_dmul>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e3e:	f7fd fb9f 	bl	8000580 <__aeabi_dmul>
 8002e42:	a363      	add	r3, pc, #396	; (adr r3, 8002fd0 <__ieee754_log+0x318>)
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	4680      	mov	r8, r0
 8002e4a:	4689      	mov	r9, r1
 8002e4c:	f7fd fb98 	bl	8000580 <__aeabi_dmul>
 8002e50:	a361      	add	r3, pc, #388	; (adr r3, 8002fd8 <__ieee754_log+0x320>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd f9dd 	bl	8000214 <__adddf3>
 8002e5a:	4642      	mov	r2, r8
 8002e5c:	464b      	mov	r3, r9
 8002e5e:	f7fd fb8f 	bl	8000580 <__aeabi_dmul>
 8002e62:	a35f      	add	r3, pc, #380	; (adr r3, 8002fe0 <__ieee754_log+0x328>)
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f7fd f9d4 	bl	8000214 <__adddf3>
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	464b      	mov	r3, r9
 8002e70:	f7fd fb86 	bl	8000580 <__aeabi_dmul>
 8002e74:	a35c      	add	r3, pc, #368	; (adr r3, 8002fe8 <__ieee754_log+0x330>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f7fd f9cb 	bl	8000214 <__adddf3>
 8002e7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002e82:	f7fd fb7d 	bl	8000580 <__aeabi_dmul>
 8002e86:	a35a      	add	r3, pc, #360	; (adr r3, 8002ff0 <__ieee754_log+0x338>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e90:	4640      	mov	r0, r8
 8002e92:	4649      	mov	r1, r9
 8002e94:	f7fd fb74 	bl	8000580 <__aeabi_dmul>
 8002e98:	a357      	add	r3, pc, #348	; (adr r3, 8002ff8 <__ieee754_log+0x340>)
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f7fd f9b9 	bl	8000214 <__adddf3>
 8002ea2:	4642      	mov	r2, r8
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	f7fd fb6b 	bl	8000580 <__aeabi_dmul>
 8002eaa:	a355      	add	r3, pc, #340	; (adr r3, 8003000 <__ieee754_log+0x348>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f7fd f9b0 	bl	8000214 <__adddf3>
 8002eb4:	4642      	mov	r2, r8
 8002eb6:	464b      	mov	r3, r9
 8002eb8:	f7fd fb62 	bl	8000580 <__aeabi_dmul>
 8002ebc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8002ec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002ecc:	f7fd f9a2 	bl	8000214 <__adddf3>
 8002ed0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8002ed4:	3551      	adds	r5, #81	; 0x51
 8002ed6:	4335      	orrs	r5, r6
 8002ed8:	2d00      	cmp	r5, #0
 8002eda:	4680      	mov	r8, r0
 8002edc:	4689      	mov	r9, r1
 8002ede:	dd48      	ble.n	8002f72 <__ieee754_log+0x2ba>
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	4b4d      	ldr	r3, [pc, #308]	; (8003018 <__ieee754_log+0x360>)
 8002ee4:	4650      	mov	r0, sl
 8002ee6:	4659      	mov	r1, fp
 8002ee8:	f7fd fb4a 	bl	8000580 <__aeabi_dmul>
 8002eec:	4652      	mov	r2, sl
 8002eee:	465b      	mov	r3, fp
 8002ef0:	f7fd fb46 	bl	8000580 <__aeabi_dmul>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4606      	mov	r6, r0
 8002efa:	460f      	mov	r7, r1
 8002efc:	4640      	mov	r0, r8
 8002efe:	4649      	mov	r1, r9
 8002f00:	f7fd f988 	bl	8000214 <__adddf3>
 8002f04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f08:	f7fd fb3a 	bl	8000580 <__aeabi_dmul>
 8002f0c:	4680      	mov	r8, r0
 8002f0e:	4689      	mov	r9, r1
 8002f10:	b964      	cbnz	r4, 8002f2c <__ieee754_log+0x274>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4630      	mov	r0, r6
 8002f18:	4639      	mov	r1, r7
 8002f1a:	f7fd f979 	bl	8000210 <__aeabi_dsub>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4650      	mov	r0, sl
 8002f24:	4659      	mov	r1, fp
 8002f26:	f7fd f973 	bl	8000210 <__aeabi_dsub>
 8002f2a:	e6da      	b.n	8002ce2 <__ieee754_log+0x2a>
 8002f2c:	a322      	add	r3, pc, #136	; (adr r3, 8002fb8 <__ieee754_log+0x300>)
 8002f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f36:	f7fd fb23 	bl	8000580 <__aeabi_dmul>
 8002f3a:	a321      	add	r3, pc, #132	; (adr r3, 8002fc0 <__ieee754_log+0x308>)
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	4604      	mov	r4, r0
 8002f42:	460d      	mov	r5, r1
 8002f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f48:	f7fd fb1a 	bl	8000580 <__aeabi_dmul>
 8002f4c:	4642      	mov	r2, r8
 8002f4e:	464b      	mov	r3, r9
 8002f50:	f7fd f960 	bl	8000214 <__adddf3>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4630      	mov	r0, r6
 8002f5a:	4639      	mov	r1, r7
 8002f5c:	f7fd f958 	bl	8000210 <__aeabi_dsub>
 8002f60:	4652      	mov	r2, sl
 8002f62:	465b      	mov	r3, fp
 8002f64:	f7fd f954 	bl	8000210 <__aeabi_dsub>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	4629      	mov	r1, r5
 8002f70:	e7d9      	b.n	8002f26 <__ieee754_log+0x26e>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4650      	mov	r0, sl
 8002f78:	4659      	mov	r1, fp
 8002f7a:	f7fd f949 	bl	8000210 <__aeabi_dsub>
 8002f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f82:	f7fd fafd 	bl	8000580 <__aeabi_dmul>
 8002f86:	4606      	mov	r6, r0
 8002f88:	460f      	mov	r7, r1
 8002f8a:	2c00      	cmp	r4, #0
 8002f8c:	f43f af25 	beq.w	8002dda <__ieee754_log+0x122>
 8002f90:	a309      	add	r3, pc, #36	; (adr r3, 8002fb8 <__ieee754_log+0x300>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f9a:	f7fd faf1 	bl	8000580 <__aeabi_dmul>
 8002f9e:	a308      	add	r3, pc, #32	; (adr r3, 8002fc0 <__ieee754_log+0x308>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	460d      	mov	r5, r1
 8002fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002fac:	e729      	b.n	8002e02 <__ieee754_log+0x14a>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	e696      	b.n	8002ce2 <__ieee754_log+0x2a>
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	fee00000 	.word	0xfee00000
 8002fbc:	3fe62e42 	.word	0x3fe62e42
 8002fc0:	35793c76 	.word	0x35793c76
 8002fc4:	3dea39ef 	.word	0x3dea39ef
 8002fc8:	55555555 	.word	0x55555555
 8002fcc:	3fd55555 	.word	0x3fd55555
 8002fd0:	df3e5244 	.word	0xdf3e5244
 8002fd4:	3fc2f112 	.word	0x3fc2f112
 8002fd8:	96cb03de 	.word	0x96cb03de
 8002fdc:	3fc74664 	.word	0x3fc74664
 8002fe0:	94229359 	.word	0x94229359
 8002fe4:	3fd24924 	.word	0x3fd24924
 8002fe8:	55555593 	.word	0x55555593
 8002fec:	3fe55555 	.word	0x3fe55555
 8002ff0:	d078c69f 	.word	0xd078c69f
 8002ff4:	3fc39a09 	.word	0x3fc39a09
 8002ff8:	1d8e78af 	.word	0x1d8e78af
 8002ffc:	3fcc71c5 	.word	0x3fcc71c5
 8003000:	9997fa04 	.word	0x9997fa04
 8003004:	3fd99999 	.word	0x3fd99999
 8003008:	c3500000 	.word	0xc3500000
 800300c:	43500000 	.word	0x43500000
 8003010:	7fefffff 	.word	0x7fefffff
 8003014:	3ff00000 	.word	0x3ff00000
 8003018:	3fe00000 	.word	0x3fe00000

0800301c <matherr>:
 800301c:	2000      	movs	r0, #0
 800301e:	4770      	bx	lr

08003020 <nan>:
 8003020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003028 <nan+0x8>
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	00000000 	.word	0x00000000
 800302c:	7ff80000 	.word	0x7ff80000

08003030 <_init>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr

0800303c <_fini>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr
